// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: question_answer.sql

package db

import (
	"context"
)

const createQuestionAnswer = `-- name: CreateQuestionAnswer :one
INSERT INTO
    "QuestionAnswer" (
        "QuestionId",
        "AnswerText",
        "Score"
    )
VALUES
    (
        $1 :: INT,
        $2 :: VARCHAR(2000),
        $3 :: INT
    ) RETURNING "Id", "QuestionId", "AnswerText", "Score"
`

type CreateQuestionAnswerParams struct {
	QuestionId int32
	AnswerText string
	Score      int32
}

func (q *Queries) CreateQuestionAnswer(ctx context.Context, arg CreateQuestionAnswerParams) (QuestionAnswer, error) {
	row := q.db.QueryRowContext(ctx, createQuestionAnswer, arg.QuestionId, arg.AnswerText, arg.Score)
	var i QuestionAnswer
	err := row.Scan(
		&i.Id,
		&i.QuestionId,
		&i.AnswerText,
		&i.Score,
	)
	return i, err
}

const getQuestionAnswerById = `-- name: GetQuestionAnswerById :one
SELECT
    "Id", "QuestionId", "AnswerText", "Score"
FROM
    "QuestionAnswer"
WHERE
    "Id" = $1 :: INT
LIMIT
    1
`

func (q *Queries) GetQuestionAnswerById(ctx context.Context, id int32) (QuestionAnswer, error) {
	row := q.db.QueryRowContext(ctx, getQuestionAnswerById, id)
	var i QuestionAnswer
	err := row.Scan(
		&i.Id,
		&i.QuestionId,
		&i.AnswerText,
		&i.Score,
	)
	return i, err
}
