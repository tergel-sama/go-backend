// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: question_group_answer.sql

package db

import (
	"context"
)

const createQuestionGroupAnswer = `-- name: CreateQuestionGroupAnswer :one
INSERT INTO
    "QuestionGroupAnswer" (
        "QuestionGroupId",
        "MaxScr",
        "MinScr",
        "AnswerText"
    )
VALUES
    (
        $1 :: INT,
        $2 :: INT,
        $3 :: INT,
        $4 :: VARCHAR(2000)
    ) RETURNING "Id", "QuestionGroupId", "MaxScr", "MinScr", "AnswerText"
`

type CreateQuestionGroupAnswerParams struct {
	QuestionGroupId int32
	MaxScr          int32
	MinScr          int32
	AnswerText      string
}

func (q *Queries) CreateQuestionGroupAnswer(ctx context.Context, arg CreateQuestionGroupAnswerParams) (QuestionGroupAnswer, error) {
	row := q.db.QueryRowContext(ctx, createQuestionGroupAnswer,
		arg.QuestionGroupId,
		arg.MaxScr,
		arg.MinScr,
		arg.AnswerText,
	)
	var i QuestionGroupAnswer
	err := row.Scan(
		&i.Id,
		&i.QuestionGroupId,
		&i.MaxScr,
		&i.MinScr,
		&i.AnswerText,
	)
	return i, err
}

const getQuestionGroupAnswerById = `-- name: GetQuestionGroupAnswerById :one
SELECT
    "Id", "QuestionGroupId", "MaxScr", "MinScr", "AnswerText"
FROM
    "QuestionGroupAnswer"
WHERE
    "Id" = $1 :: INT
LIMIT
    1
`

func (q *Queries) GetQuestionGroupAnswerById(ctx context.Context, id int32) (QuestionGroupAnswer, error) {
	row := q.db.QueryRowContext(ctx, getQuestionGroupAnswerById, id)
	var i QuestionGroupAnswer
	err := row.Scan(
		&i.Id,
		&i.QuestionGroupId,
		&i.MaxScr,
		&i.MinScr,
		&i.AnswerText,
	)
	return i, err
}
